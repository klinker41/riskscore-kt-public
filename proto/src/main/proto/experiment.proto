syntax = "proto3";

package en.riskscore;

option java_package = "com.google.en.riskscore";
option java_multiple_files = true;

// Defines an experiment run on multiple participants.
message Experiment {

  // The name of the experiment.
  string experiment_name = 1;

  // Defines a user who lead the experiment.
  message Lead {

    // The name of the leader.
    string device_name = 1;

    // A list of TEKs generated by the leader.
    repeated TemporaryExposureKey temporary_tracing_keys = 2;
  }

  // Information about the leader of the experiment.
  Lead lead = 2;

  // Defines configuration values for the experiment.
  message Configuration {

    // A list of attenuation duration thresholds passed into the EN framework.
    repeated int32 attenuation_duration_thresholds = 1;
  }

  // A list of configurations for the experiment (currently unused).
  repeated Configuration requested_configurations = 3;

  // Defines a participant within the experiment.
  message Participant {

    // The name of the participant.
    string device_name = 1;

    // The TEKs generated by the participant.
    repeated TemporaryExposureKey temporary_tracing_keys = 2;

    // Defines results for a participants contacts during the experiment. This represents which
    // devices the participant came into contact with, when the contact occurred and durations of
    // the contact.
    message Result {

      // Defines who a device came into contact with.
      message Counterpart {

        // The name of the counterpart.
        string device_name = 1;

        // Defines an exposure with another individual.
        message ExposureWindow {

          // The date the exposure occurred at.
          string date = 1;

          // Defines a scan instance for an exposure window.
          message ScanInstance {

            // The typical attenuation in Db from this scan (internally, this is an average over
            // the scan).
            int32 typical_attenuation_db = 1;

            // The minimum attenuation in Db found during this scan.
            int32 min_attenuation_db = 2;

            // The amount of time in seconds that has passed since the last scan occurred.
            int32 seconds_since_last_scan = 3;
          }

          // A list of scan instances associated with this exposure.
          repeated ScanInstance scan_instances = 2;

          // The report type for this exposure (unused).
          int32 report_type = 3;

          // How infectious this exposure was marked (unused).
          int32 infectiousness = 4;

          // How confident we were in TX power calibrations for this exposure (unused).
          int32 calibration_confidence = 5;
        }

        // A list of exposure windows reported with the counterpart.
        repeated ExposureWindow exposure_windows = 2;
      }

      // A list of counterparts encountered during this result.
      repeated Counterpart counterparts = 1;

      // Time when the result was queried.
      string timestamp = 2;
    }

    // The results from the participant.
    repeated Result results = 3;

    // The Google Play Services version on the phone (for Android users).
    string google_play_services_version = 4;

    // The EN API version (for Android users).ÃŸ
    string used_exposure_notification_api_version = 5;
  }

  // A list of participants from the experiment.
  repeated Participant participants = 4;

  // A unique ID identifying the experiment.
  string experiment_id = 5;
}

// Defines a temporary exposure key used to generate advertisements on a device.
message TemporaryExposureKey {

  // The key used to generate advertisements (in base64).
  string key = 1;

  // The interval count (ie, 10 minute interval) throughout the day for which the key is valid for.
  // For example, if set to 144, then this key was used throughout the entire day (144 * 10 minutes
  // is 24 hours).
  int32 interval_count = 2;

  // The interval number where this key became valid. Interval number is represents a time in 10
  // minute intervals since epoch and is considered the start time for a key. The end time for the
  // key would be defined as interval_number + interval_count.
  int32 interval_number = 3;
}
